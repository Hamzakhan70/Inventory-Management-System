// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  quantity    Int
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  supplierId  Int
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
}

model Supplier {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  products    Product[]
  createdAt   DateTime  @default(now())
}



model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  customer   Customer    @relation(fields: [customerId], references: [id])
  status     String      @default("PENDING")
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  items      OrderItem[]
  payment    Payment?

}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float  // price at time of order
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}


model Payment {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int       @unique
  amount    Float
  status    String   // "PENDING" | "SUCCESS" | "FAILED"
  method    String   // "STRIPE" | "COD"
 stripeSessionId       String?   // optional
stripePaymentIntentId String?   // âœ… new column
  createdAt DateTime @default(now())
  refund    Refund?
}

model Refund {
  id        Int      @id @default(autoincrement())
  payment   Payment  @relation(fields: [paymentId], references: [id])
  paymentId Int      @unique
  amount    Float
  reason    String?
  status    String   @default("PENDING") // PENDING, SUCCESS, FAILED
  createdAt DateTime @default(now())
}
model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
}
